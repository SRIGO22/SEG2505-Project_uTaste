@startuml
' Abstract base class for all users
abstract class User {
  - firstName: String
  - lastName: String
  - email: String
  - password: String
  - createdAt: DateTime
  - modifiedAt: DateTime
  + authenticate(pwd: String): boolean
  + changePassword(newPwd: String): void
  + updateProfile(fn: String, ln: String, email: String): void
  + logout(): void
}

' Interface for role-based access
interface Role {
  + getRoleName(): String
}

' Administrator role
class Administrator {
  + createWaiter(email: String): void
  + deleteWaiter(email: String): void
  + modifyWaiter(email: String, fn: String, ln: String): void
}

' Chef role
class Chef {
  ' No methods required in Deliverable 1
}

' Waiter role
class Waiter {
  ' No methods required in Deliverable 1
}

' Association class for login sessions
class Session {
  - user: User
  - loginTime: DateTime
  + logout(): void
}

' Class to manage the system state
class UserManager {
  - users: List<User>
  + addUser(u: User): void
  + removeUser(email: String): void
  + findUser(email: String): User
}

User <|-- Administrator
User <|-- Chef
User <|-- Waiter

Administrator ..|> Role
Chef ..|> Role
Waiter ..|> Role

User --> "1" Session : manages >
UserManager --> "*" User : manages >
@enduml
